name: Run CI

# Run this workflow every time a new commit pushed to your repository
on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

env:
  IMAGE_NAME: demo-extension

jobs:
  tests:
    name: Run the Django test suite
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        # Needed because the postgres container does not provide a healthcheck
        options:
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
          --name postgres
      redis:
        image: redis:6
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set up backend environment
        uses: maykinmedia/setup-django-backend@v1.1
        with:
          apt-packages: 'libxml2-dev libxmlsec1-dev libxmlsec1-openssl gettext postgresql-client gdal-bin'
          python-version: '3.10'
          optimize-postgres: 'yes'
          pg-service: 'postgres'
          setup-node: 'yes'
          nvmrc-custom-dir: 'open-forms'
          npm-ci-flags: '--legacy-peer-deps'
          working-directory: open-forms

      - name: Run tests
        # Both the dir containing manage.py and the working directory are added to the path automatically
        run: |
          python open-forms/src/manage.py compilemessages
          coverage run --source=demo_extension open-forms/src/manage.py test demo_extension
          coverage xml -o coverage-extension.xml
        env:
          DJANGO_SETTINGS_MODULE: openforms.conf.ci
          SECRET_KEY: dummy
          DB_USER: postgres
          DB_PASSWORD: ''
          OPEN_FORMS_EXTENSIONS: demo_extension

      - name: Publish coverage report
        uses: codecov/codecov-action@v3.1.4
        with:
          files: ./coverage-extension.xml

  docker_build:
    name: Build Docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set tag
        id: vars
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name (if present at all)
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          # PRs result in version 'merge' -> transform that into 'latest'
          [ "$VERSION" == "merge" ] && VERSION=latest

          echo ::set-output name=tag::${VERSION}

      - name: Build the Docker image
        run: |
          docker build . \
            --tag $IMAGE_NAME:$RELEASE_VERSION
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}

      - run: docker image save -o image.tar $IMAGE_NAME:${{ steps.vars.outputs.tag }}
      - name: Store image artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: image.tar
          retention-days: 1

